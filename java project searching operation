class BST_Java {
    class Node { // Class Node For Creating Node Structure
        int key;
        Node left, right;

        public Node(int info){
            key = info;
            left = right = null;
        }
    }

    Node root; // Creating Root Node
    BST_Java(){ // Constructor For Binary Search Tree
        root = null;
    }

    void insert(int key){ // Function To Insert A Node To BST
        root = inRecur(root, key);
    }

    Node inRecur(Node root, int key){ // Function To Recursively Insert Element
        if (root == null){ // Condition To Check Empty Tree
            root = new Node(key);
            return root;
        }
        if (key < root.key) // Inserting Element In The Left
            root.left = inRecur(root.left, key);
        else if (key > root.key) // Inserting Element In The Right
            root.right = inRecur(root.right, key);
        return root; // Returning The Pointer
    }

    String searchkey(int key){ // Search Function That Returns String Value
        root = sear(root, key);
        if (root!= null) // If Node Is Present
            return "Yes";
        else // If Node Is Not Present
            return "No";
    }

    Node sear(Node root, int key){
        if (root==null || root.key==key)
            return root;
        if (root.key > key)
            return sear(root.left, key);
        return sear(root.right, key);
    }

    void print(){ // Function To Print The BST
        Recurprint(root);
    }
    void Recurprint(Node root){ // Recuersive Print Function To Reduce Time Complexity
        if (root != null) { // Checking Root Status
            Recurprint(root.left);
            System.out.print(root.key + "->");
            Recurprint(root.right);
        }
    }

}
public class Main{
    public static void main(String[] args)  {
        BST_Java tree = new BST_Java(); // Making Binary Search Tree Object
        // Inserting Elements Into The Tree
        tree.insert(10);
        tree.insert(5);
        tree.insert(3);
        tree.insert(15);
        System.out.print("The Created Binary Search Tree: ");
        tree.print(); // Printing The Entire BST

        System.out.println();
        String result = tree.searchkey(150); // Searching For The Key
        System.out.println("Is The Key 150 Found In BST? : " + result); // Checking The Key
     }
}
